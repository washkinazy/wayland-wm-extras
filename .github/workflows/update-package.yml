name: Update Package

on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
        description: 'Package name'
      upstream_repo:
        required: true
        type: string
        description: 'Upstream GitHub repository (owner/repo)'
      spec_dir:
        required: true
        type: string
        description: 'Directory containing the spec file'
    secrets:
      PAT_TOKEN:
        required: true
        description: 'GitHub PAT with repo and workflow scopes'

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm jq curl

          # Install yq for YAML parsing
          sudo wget -qO /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/bin/yq

      - name: Get latest upstream release
        id: upstream
        run: |
          echo "Checking for latest release of ${{ inputs.upstream_repo }}"

          # Get latest release from GitHub API
          RELEASE_DATA=$(curl -s "https://api.github.com/repos/${{ inputs.upstream_repo }}/releases/latest")

          # Extract tag and version
          TAG=$(echo "$RELEASE_DATA" | jq -r '.tag_name')
          VERSION=$(echo "$TAG" | sed 's/^v//')  # Strip leading 'v'

          if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
            echo "Error: Could not fetch latest release"
            exit 1
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Latest release: $TAG (version: $VERSION)"

      - name: Get current spec version
        id: current
        run: |
          SPEC_FILE="${{ inputs.spec_dir }}/${{ inputs.package_name }}.spec"

          if [ ! -f "$SPEC_FILE" ]; then
            echo "Error: Spec file not found: $SPEC_FILE"
            exit 1
          fi

          CURRENT_VERSION=$(rpmspec -q --qf "%{version}\n" "$SPEC_FILE" 2>/dev/null | head -1)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version in spec: $CURRENT_VERSION"

      - name: Compare versions
        id: compare
        run: |
          CURRENT="${{ steps.current.outputs.version }}"
          LATEST="${{ steps.upstream.outputs.version }}"

          echo "Current: $CURRENT"
          echo "Latest:  $LATEST"

          if [ "$CURRENT" = "$LATEST" ]; then
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "Package is already up to date"
          else
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Update available: $CURRENT -> $LATEST"
          fi

      - name: Update spec file
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          .github/scripts/update-spec.sh \
            "${{ inputs.spec_dir }}" \
            "${{ inputs.package_name }}" \
            "${{ steps.upstream.outputs.version }}" \
            "${{ steps.upstream.outputs.tag }}"

      - name: Validate spec file
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          .github/scripts/validate-spec.sh \
            "${{ inputs.spec_dir }}" \
            "${{ inputs.package_name }}"

      - name: Check source accessibility
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          .github/scripts/check-source.sh \
            "${{ inputs.spec_dir }}" \
            "${{ inputs.package_name }}"

      - name: Create Pull Request
        if: steps.compare.outputs.update_needed == 'true'
        uses: peter-evans/create-pull-request@v5
        id: cpr
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "chore: update ${{ inputs.package_name }} to ${{ steps.upstream.outputs.version }}"
          title: "chore: update ${{ inputs.package_name }} to ${{ steps.upstream.outputs.version }}"
          body: |
            ## Automated Package Update

            **Package:** ${{ inputs.package_name }}
            **Current Version:** ${{ steps.current.outputs.version }}
            **New Version:** ${{ steps.upstream.outputs.version }}
            **Upstream Release:** https://github.com/${{ inputs.upstream_repo }}/releases/tag/${{ steps.upstream.outputs.tag }}

            This PR was automatically generated by the package monitoring system.

            ### Changes
            - Updated Version field to ${{ steps.upstream.outputs.version }}
            - Updated Source0 URL to use tag ${{ steps.upstream.outputs.tag }}
            - Added changelog entry

            ### Validation
            - [x] Spec file syntax validated
            - [x] Source tarball accessibility checked

            ---
            *This PR will be automatically merged after validation.*
          branch: auto-update/${{ inputs.package_name }}-${{ steps.upstream.outputs.version }}
          delete-branch: true
          labels: |
            automated
            version-update
            ${{ inputs.package_name }}

      - name: Merge Pull Request
        if: steps.compare.outputs.update_needed == 'true' && steps.cpr.outputs.pull-request-number != ''
        run: |
          # Wait a moment for PR to be fully created
          sleep 2

          # Retry merge up to 5 times with exponential backoff to handle concurrent PR merges
          MAX_RETRIES=5
          RETRY_COUNT=0
          MERGED=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$MERGED" = "false" ]; do
            if gh pr merge ${{ steps.cpr.outputs.pull-request-number }} --squash --delete-branch --admin; then
              MERGED=true
              echo "PR merged successfully"
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((2 ** RETRY_COUNT))
                echo "Merge failed, retrying in ${WAIT_TIME}s (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)..."
                sleep $WAIT_TIME

                # Update branch before retry
                git fetch origin main
                git -C /tmp checkout auto-update/${{ inputs.package_name }}-${{ steps.upstream.outputs.version }} 2>/dev/null || true
              else
                echo "Failed to merge after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.compare.outputs.update_needed }}" = "true" ]; then
            echo "[SUCCESS] Update PR created for ${{ inputs.package_name }}"
            echo "[INFO] Version: ${{ steps.current.outputs.version }} -> ${{ steps.upstream.outputs.version }}"
          else
            echo "[OK] ${{ inputs.package_name }} is up to date (${{ steps.current.outputs.version }})"
          fi
